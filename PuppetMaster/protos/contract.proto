//
// Protocol buffers definition for ---
//
syntax = "proto3";
option csharp_namespace = "PuppetMasterClient";

// CHECK IF REPLICATION FACTOR IS PART OF THE THINGY
/*
message ChangeReplicationFactorRequest {
	int32 replicationFactor = 1;
}

message ChangeReplicationFactorResponse {
	//ol
}
*/

//PROCESS CREATION SERVICE 

message PartitionMessage {
	string id = 1;
	string masterURL = 2;
}
message StartServerRequest {
	string serverId = 1;
	string URL = 2;
	float minDelay = 3;
	float maxDelay = 4;

	repeated PartitionMessage partitions = 5;
}

message StartServerResponse {
	string url = 1;
	string port = 2;
}

message PartitionClientMessage {
	string partitionId = 1;
	repeated string serverUrls = 2; 
}

message StartClientRequest {
	string username = 1;
	string URL = 2;
	string scriptFile = 3;
	string defaultServerUrl = 4;

	repeated PartitionClientMessage partitions = 5;
}

message StartClientResponse {
	string url = 1;
	string port = 2;
}

service ProcessCreationService {
  rpc startServer(StartServerRequest) returns (StartServerResponse);
  rpc startClient(StartClientRequest) returns (StartClientResponse);
}

//NODE CONTROL SERVICE

message StatusRequest {
	//empty
}

message StatusResponse {
  string status = 1;
}

message CrashRequest {
	//nothing
}

message CrashResponse {
	//nothing
}

message FreezeRequest {
	//nothing
}
message FreezeResponse {
	//nothing
}
message UnfreezeRequest {
	//nothing
}
message UnfreezeResponse {
	//nothing
}

message ServerInfoMessage {
	string serverId = 1;
	string serverUrl = 2;
}

message PartitionInfoMessage {
	string partitionId = 1;
	string partitionMasterUrl = 2;
	bool isMyPartition = 3;

	//not used in base
	repeated string serverIds = 4; 
}

message CompleteSetupRequest {
	repeated ServerInfoMessage serverInfo = 1;
	repeated PartitionInfoMessage partitions = 2;
}


message CompleteSetupResponse {
	//nothing
}

service NodeControlService {
  rpc status(StatusRequest) returns (StatusResponse);
  rpc crash(CrashRequest) returns (CrashResponse);
  rpc freeze(FreezeRequest) returns (FreezeResponse);
  rpc unfreeze(UnfreezeRequest) returns (UnfreezeResponse);
  rpc completeSetup(CompleteSetupRequest) returns (CompleteSetupResponse);
}

//we could have a service only for status (client).